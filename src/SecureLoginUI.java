//ADIYAN A. AHMED - ICS4U
//This program is a login menu for a random website, which allows the user to register an account with an email, 
//username, and password. The program stores this information in a text file whilst encrypting the password using
//MD5. The user is then able to use their previously registered username and password to log in to the program. 
//If the user has forgotten their password for their account, they are able to change their password, provided that 
//they know their account's username and the email associated with it. 

import java.io.EOFException;
import java.io.File;
import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Adiyan
 */
public class SecureLoginUI extends javax.swing.JFrame {

    //Creating arrayLists to store user information (usernames, emails, and passwords)
    static ArrayList<String> usernameList = new ArrayList<String>();
    static ArrayList<String> emailList = new ArrayList<String>();
    static ArrayList<String> passwordList = new ArrayList<String>();

    /**
     * Creates new form SecureLoginUI
     */
    public SecureLoginUI() throws FileNotFoundException, IOException,
            ClassNotFoundException, EOFException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleHeader = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        login = new javax.swing.JButton();
        newUserRegistration = new javax.swing.JLabel();
        newUsernameLabel = new javax.swing.JLabel();
        newEmailLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        newEmail = new javax.swing.JTextField();
        newUsername = new javax.swing.JTextField();
        newPassword = new javax.swing.JTextField();
        register = new javax.swing.JButton();
        currentStatus = new javax.swing.JLabel();
        forgotPasswordLabel = new javax.swing.JLabel();
        currentUsernameLabel = new javax.swing.JLabel();
        currentEmailLabel = new javax.swing.JLabel();
        forgotNewPasswordLabel = new javax.swing.JLabel();
        currentUsername = new javax.swing.JTextField();
        currentEmail = new javax.swing.JTextField();
        forgotNewPassword = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleHeader.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        titleHeader.setText("ADIYAN Canada Ltd. - SIGN-IN");

        usernameLabel.setText("USERNAME:");

        passwordLabel.setText("PASSWORD:");

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        login.setText("LOGIN");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        newUserRegistration.setText("NEW USER REGISTRATION");

        newUsernameLabel.setText("New Username:");

        newEmailLabel.setText("New Email:");

        newPasswordLabel.setText("New Password:");

        newEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEmailActionPerformed(evt);
            }
        });

        newUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUsernameActionPerformed(evt);
            }
        });

        newPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordActionPerformed(evt);
            }
        });

        register.setText("REGISTER");
        register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerActionPerformed(evt);
            }
        });

        currentStatus.setFont(new java.awt.Font("Microsoft Yi Baiti", 1, 24)); // NOI18N

        forgotPasswordLabel.setText("FORGOT PASSWORD");

        currentUsernameLabel.setText("Current Username:");

        currentEmailLabel.setText("Email:");

        forgotNewPasswordLabel.setText("New Password:");

        currentUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentUsernameActionPerformed(evt);
            }
        });

        currentEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentEmailActionPerformed(evt);
            }
        });

        forgotNewPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotNewPasswordActionPerformed(evt);
            }
        });

        nextButton.setText("NEXT");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newUserRegistration)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernameLabel)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newUsernameLabel))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(newPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(newPasswordLabel))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(newEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(login)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(newEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(register))
                                            .addComponent(forgotNewPasswordLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(forgotNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(nextButton))))))
                            .addComponent(forgotPasswordLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(currentUsernameLabel)
                                .addGap(28, 28, 28)
                                .addComponent(currentEmailLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(currentUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(currentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 130, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(login))
                .addGap(41, 41, 41)
                .addComponent(newUserRegistration)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newUsernameLabel)
                    .addComponent(newPasswordLabel)
                    .addComponent(newEmailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(register))
                .addGap(37, 37, 37)
                .addComponent(forgotPasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentUsernameLabel)
                    .addComponent(currentEmailLabel)
                    .addComponent(forgotNewPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currentUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(forgotNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nextButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(currentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    private void newEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newEmailActionPerformed

    private void newUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newUsernameActionPerformed

    private void newPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPasswordActionPerformed

    private void registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerActionPerformed
        //What happens when the REGISTER button is clicked by the user. 
        String password;
        String username;
        String email;
        File badPasswords = new File("badPasswords.txt"); //getting access to the file badPasswords.txt
        String testPassword;

        //Checking if the information entered by the user is valid
        if (newPassword.getText().isEmpty() == false
                && newUsername.getText().isEmpty() == false
                && newEmail.getText().isEmpty() == false
                && newEmail.getText().indexOf('@') > 0 //valid email address check with @
                && newEmail.getText().indexOf('.') > 0) { //valid email address check with . 

            testPassword = newPassword.getText(); //testing the user's entered password with this string

            if (testPassword.length() >= 4) { //checking if the password has more than 4 characters
                ArrayList<String> badPasswordList = new ArrayList<String>(); //arrayList for bad passwords

                //reading from badPasswords.txt and creating a list of bad passwords
                try {
                    Scanner readBadPassword = new Scanner(badPasswords);
                    while (readBadPassword.hasNext()) { //reading in the badPasswords file
                        badPasswordList.add(readBadPassword.next());
                    }
                    readBadPassword.close();
                } catch (FileNotFoundException ex) {
                    System.out.println("File not found");
                }

                //Checking entered password against badPasswords.txt for a valid password entry
                if (badPasswordList.contains(testPassword) == false) {

                    //retrieving user's entered information once it is confirmed as valid
                    username = newUsername.getText();
                    email = newEmail.getText();
                    password = newPassword.getText();

                    try {
                        //adding the new information to the arraylists 
                        usernameList.add(username);
                        passwordList.add(encrypt(password));
                        emailList.add(email);
                        fileWrite(); //writing the information into the userData.txt file
                        currentStatus.setText("New account created successfully.");
                        newUsername.setText("");
                        newPassword.setText("");
                        newEmail.setText(""); //emptying the new user boxes after successful registration
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(SecureLoginUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    //prompting the user to choose a better password, because it is either 
                    //too short or matches one of the bad passwords.
                    currentStatus.setText("Password too weak. Please pick a better password!");
                }

            } else {
                currentStatus.setText("Please enter a password with at least 4 characters.");
            }

        } else {
            //prompting user to enter a valid information if any of the fields are empty
            //or they have an invalid email address
            currentStatus.setText("Please enter valid information.");
        }


    }//GEN-LAST:event_registerActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        //What happens when the LOGIN button is clicked by the user 
        String usernameLogin = username.getText();
        String passwordLogin = password.getText();
        boolean verify = false;

        //loop running through each arraylist to see if there is a matching username/password
        for (int counter = 0; counter < usernameList.size(); counter++) {
            try {
                if (usernameLogin.equals(usernameList.get(counter)) && encrypt(passwordLogin).equals(passwordList.get(counter))) {
                    verify = true; //if the username and password combination are found to be valid 
                }
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(SecureLoginUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (verify == true) { //giving user message to let them know if they've logged in successfully or not
            currentStatus.setText("Successfully logged in! Welcome back," + " " + usernameLogin + "!");
            username.setText("");
            password.setText(""); //emptying out the username and password boxes
        } else {
            currentStatus.setText("Incorrect username or password entered. Please try again");
            username.setText("");
            password.setText(""); //emptying out the username and password boxes
        }
    }//GEN-LAST:event_loginActionPerformed

    private void currentUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentUsernameActionPerformed

    private void currentEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentEmailActionPerformed

    private void forgotNewPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgotNewPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forgotNewPasswordActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        //What happens when the NEXT button is clicked by the user in the forgot password section of the program
        //Button used to change password if the user identifies correct username and associated email address
        File badPasswords = new File("badPasswords.txt"); //getting access to the file badPasswords.txt
        String username = currentUsername.getText();
        String email = currentEmail.getText();
        String newPassword = forgotNewPassword.getText();

        ArrayList<String> badPasswordList = new ArrayList<String>(); //arrayList for bad passwords
        String testPassword = forgotNewPassword.getText(); //testing the user's new entered password with this string

        //reading from badPasswords.txt and creating a list of bad passwords
        try {
            Scanner readBadPassword = new Scanner(badPasswords);
            while (readBadPassword.hasNext()) { //reading in the badPasswords file
                badPasswordList.add(readBadPassword.next());
            }
            readBadPassword.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found");
        }

        if (badPasswordList.contains(testPassword) == false && testPassword.length() >= 4) {
            //loop running through the arraylists to see if there is a matching username/email combination
            for (int counter = 0; counter < usernameList.size(); counter++) {
                if (username.equals(usernameList.get(counter)) && email.equals(emailList.get(counter))) { //confirming that the privded information is true
                    try {
                        passwordList.set(counter, encrypt(newPassword));
                        fileWrite(); //rewriting the new information into the userData document
                        currentStatus.setText("New password set!"); //prompting the user that their password has been changed
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(SecureLoginUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else { //prompting the user if there is no account created with the information provided 
                    currentStatus.setText("Sorry, there is no account linked with the information provided.");
                }
            }
        } else {
            currentStatus.setText("Please enter a stronger password as your replacement.");
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * Method used to encrypt a password using MD5 encryption
     *
     * @param password the password to be encrypted
     * @return the encrypted password
     * @throws NoSuchAlgorithmException
     */
    public static String encrypt(String password) throws NoSuchAlgorithmException {
        //digesting the password that the user enters   
        MessageDigest md = MessageDigest.getInstance("MD5"); //using MD5 encryption 
        md.update(password.getBytes());
        byte byteData[] = md.digest();
        String encrypted = "";
        for (int counter = 0; counter < byteData.length; counter++) {
            encrypted = encrypted + (Integer.toHexString((byteData[counter] & 0xFF) | 0x100).substring(1, 3));
        }
        return encrypted;
    }

    /**
     * A method used to write the username, password, and email arrayLists into
     * the userData.txt file.
     */
    public static void fileWrite() {
        File userData = new File("userData.txt"); //getting access to the userData.txt file where emails usernames and passwords are stored 
        String userInfo;
        try {
            PrintWriter infoOutput = new PrintWriter(userData);
            for (int counter = 0; counter < usernameList.size(); counter++) {
                userInfo = usernameList.get(counter) + "," //writing all of the user info into the file using a comma delimiter
                        + passwordList.get(counter) + ","
                        + emailList.get(counter);
                infoOutput.println(userInfo);
            }
            infoOutput.close();
        } catch (IOException ex) {
            System.out.println("Error");
        }
    }

    public static void main(String args[]) throws FileNotFoundException {
        File userData = new File("userData.txt");
        //Reading in the user data from userData.txt into the 
        //arrayLists when the program is launched
        try {
            Scanner dataReader = new Scanner(userData);
            while (dataReader.hasNext()) {
                StringTokenizer userInfo = new StringTokenizer(dataReader.next(), ",");
                usernameList.add(userInfo.nextToken()); //populating the username, password, and email arrayLists                 
                passwordList.add(userInfo.nextToken()); //with the already stored info once the program is launched.
                emailList.add(userInfo.nextToken());
            }
            dataReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }

//AUTO-GENERATED         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecureLoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new SecureLoginUI().setVisible(true);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(SecureLoginUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField currentEmail;
    private javax.swing.JLabel currentEmailLabel;
    private javax.swing.JLabel currentStatus;
    private javax.swing.JTextField currentUsername;
    private javax.swing.JLabel currentUsernameLabel;
    private javax.swing.JTextField forgotNewPassword;
    private javax.swing.JLabel forgotNewPasswordLabel;
    private javax.swing.JLabel forgotPasswordLabel;
    private javax.swing.JButton login;
    private javax.swing.JTextField newEmail;
    private javax.swing.JLabel newEmailLabel;
    private javax.swing.JTextField newPassword;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JLabel newUserRegistration;
    private javax.swing.JTextField newUsername;
    private javax.swing.JLabel newUsernameLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextField password;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton register;
    private javax.swing.JLabel titleHeader;
    private javax.swing.JTextField username;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
